<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RT106X.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RT106X.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Sep 10 10:15:59 2020
<BR><P>
<H3>Maximum Stack Usage =       2400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; image_binaryzation &rArr; get_threshold &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[155]">LPUART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">__aeabi_assert</a><BR>
 <LI><a href="#[154]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">__aeabi_assert</a><BR>
 <LI><a href="#[166]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">__aeabi_assert</a><BR>
 <LI><a href="#[167]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">__aeabi_assert</a><BR>
 <LI><a href="#[145]">DbgConsole_SendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">__aeabi_assert</a><BR>
 <LI><a href="#[11e]">CLOCK_GetPerClkFreq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11b]">CLOCK_GetFreq</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8e]">ACMP1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8f]">ACMP2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[90]">ACMP3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[91]">ACMP4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[56]">ADC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[57]">ADC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8c]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[89]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8a]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8b]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4a]">BEE_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from common.o(i.BusFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d5]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[37]">CAN1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d6]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[38]">CAN2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e6]">CAN3_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[ad]">CAN3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[72]">CCM_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[73]">CCM_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[26]">CORE_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3e]">CSI_IRQHandler</a> from isr.o(i.CSI_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e8]">CSI_TransferHandleIRQ</a> from fsl_csi.o(i.CSI_TransferHandleIRQ) referenced from fsl_csi.o(i.CSI_TransferCreateHandle)
 <LI><a href="#[44]">CSU_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[24]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[25]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[58]">DCDC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[45]">DCP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[46]">DCP_VMI_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b4]">DMA0_DMA16_DriverIRQHandler</a> from fsl_edma.o(i.DMA0_DMA16_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[13]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[be]">DMA10_DMA26_DriverIRQHandler</a> from fsl_edma.o(i.DMA10_DMA26_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1d]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bf]">DMA11_DMA27_DriverIRQHandler</a> from fsl_edma.o(i.DMA11_DMA27_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1e]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c0]">DMA12_DMA28_DriverIRQHandler</a> from fsl_edma.o(i.DMA12_DMA28_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1f]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c1]">DMA13_DMA29_DriverIRQHandler</a> from fsl_edma.o(i.DMA13_DMA29_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[20]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c2]">DMA14_DMA30_DriverIRQHandler</a> from fsl_edma.o(i.DMA14_DMA30_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[21]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c3]">DMA15_DMA31_DriverIRQHandler</a> from fsl_edma.o(i.DMA15_DMA31_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[22]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b5]">DMA1_DMA17_DriverIRQHandler</a> from fsl_edma.o(i.DMA1_DMA17_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[14]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b6]">DMA2_DMA18_DriverIRQHandler</a> from fsl_edma.o(i.DMA2_DMA18_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[15]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b7]">DMA3_DMA19_DriverIRQHandler</a> from fsl_edma.o(i.DMA3_DMA19_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[16]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b8]">DMA4_DMA20_DriverIRQHandler</a> from fsl_edma.o(i.DMA4_DMA20_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[17]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b9]">DMA5_DMA21_DriverIRQHandler</a> from fsl_edma.o(i.DMA5_DMA21_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[18]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ba]">DMA6_DMA22_DriverIRQHandler</a> from fsl_edma.o(i.DMA6_DMA22_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[19]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bb]">DMA7_DMA23_DriverIRQHandler</a> from fsl_edma.o(i.DMA7_DMA23_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1a]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bc]">DMA8_DMA24_DriverIRQHandler</a> from fsl_edma.o(i.DMA8_DMA24_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1b]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bd]">DMA9_DMA25_DriverIRQHandler</a> from fsl_edma.o(i.DMA9_DMA25_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1c]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c4]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[23]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e9]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(i.DbgConsole_PrintCallback) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[10]">DebugMon_Handler</a> from common.o(i.DebugMon_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b1]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[b1]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 81 times from startup_mimxrt1064.o(RESET)
 <LI><a href="#[94]">ENC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[95]">ENC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[96]">ENC3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[97]">ENC4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e5]">ENET2_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[ac]">ENET2_1588_Timer_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e4]">ENET2_DriverIRQHandler</a> from fsl_enet.o(i.ENET2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[ab]">ENET2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e3]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[86]">ENET_1588_Timer_IRQHandler</a> from fsl_enet.o(i.ENET_1588_Timer_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e2]">ENET_DriverIRQHandler</a> from fsl_enet.o(i.ENET_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[85]">ENET_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[71]">EWM_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[dc]">FLEXIO1_DriverIRQHandler</a> from fsl_flexio.o(i.FLEXIO1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[6d]">FLEXIO1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[dd]">FLEXIO2_DriverIRQHandler</a> from fsl_flexio.o(i.FLEXIO2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[6e]">FLEXIO2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e7]">FLEXIO3_DriverIRQHandler</a> from fsl_flexio.o(i.FLEXIO3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[af]">FLEXIO3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[39]">FLEXRAM_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[de]">FLEXSPI2_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7e]">FLEXSPI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[df]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7f]">FLEXSPI_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[74]">GPC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[63]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[64]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5b]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5c]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5d]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5e]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5f]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[60]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[61]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[62]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[65]">GPIO2_Combined_0_15_IRQHandler</a> from isr.o(i.GPIO2_Combined_0_15_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[66]">GPIO2_Combined_16_31_IRQHandler</a> from isr.o(i.GPIO2_Combined_16_31_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[67]">GPIO3_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[68]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[69]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6a]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6b]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6c]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b0]">GPIO6_7_8_9_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3c]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[77]">GPT1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[78]">GPT2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from common.o(i.HardFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3a]">KPP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3d]">LCDIF_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cd]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2f]">LPI2C1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ce]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[30]">LPI2C2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cf]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[31]">LPI2C3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d0]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[32]">LPI2C4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d1]">LPSPI1_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[33]">LPSPI1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d2]">LPSPI2_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[34]">LPSPI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d3]">LPSPI3_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[35]">LPSPI3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d4]">LPSPI4_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[36]">LPSPI4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c5]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[27]">LPUART1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c6]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[28]">LPUART2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c7]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[29]">LPUART3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c8]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2a]">LPUART4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c9]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2b]">LPUART5_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ca]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2c]">LPUART6_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cb]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2d]">LPUART7_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cc]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2e]">LPUART8_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ea]">LPUART_TransferHandleIRQ</a> from fsl_lpuart.o(i.LPUART_TransferHandleIRQ) referenced from fsl_lpuart.o(i.LPUART_TransferCreateHandle)
 <LI><a href="#[c]">MemManage_Handler</a> from common.o(i.MemManage_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from common.o(i.NMI_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8d]">PIT_IRQHandler</a> from isr.o(i.PIT_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[50]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[79]">PWM1_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7a]">PWM1_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7b]">PWM1_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7c]">PWM1_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7d]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9c]">PWM2_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9d]">PWM2_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9e]">PWM2_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9f]">PWM2_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a0]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a1]">PWM3_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a2]">PWM3_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a3]">PWM3_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a4]">PWM3_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a5]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a6]">PWM4_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a7]">PWM4_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a8]">PWM4_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a9]">PWM4_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[aa]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3f]">PXP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from common.o(i.PendSV_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[70]">RTWDOG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[76]">Reserved115_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[92]">Reserved143_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[93]">Reserved144_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ae]">Reserved171_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[47]">Reserved68_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[51]">Reserved78_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[59]">Reserved86_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5a]">Reserved87_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d7]">SAI1_DriverIRQHandler</a> from fsl_sai.o(i.SAI1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4b]">SAI1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d8]">SAI2_DriverIRQHandler</a> from fsl_sai.o(i.SAI2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4c]">SAI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d9]">SAI3_RX_DriverIRQHandler</a> from fsl_sai.o(i.SAI3_RX_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4d]">SAI3_RX_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[da]">SAI3_TX_DriverIRQHandler</a> from fsl_sai.o(i.SAI3_TX_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4e]">SAI3_TX_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[80]">SEMC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[49]">SJC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[41]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[42]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[43]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[db]">SPDIF_DriverIRQHandler</a> from fsl_spdif.o(i.SPDIF_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4f]">SPDIF_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[75]">SRC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from common.o(i.SVC_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from common.o(i.SysTick_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b2]">SystemInit</a> from system_mimxrt1064.o(i.SystemInit) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[52]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[53]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[98]">TMR1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[99]">TMR2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9a]">TMR3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9b]">TMR4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[48]">TRNG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3b]">TSC_DIG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[84]">USB_OTG1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[83]">USB_OTG2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[54]">USB_PHY1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[55]">USB_PHY2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e0]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[81]">USDHC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e1]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[82]">USDHC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from common.o(i.UsageFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6f]">WDOG1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[40]">WDOG2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[87]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[88]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ed]">__main</a> from __main.o(!!!main) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[ec]">csi_isr</a> from seekfree_mt9v03x_csi.o(i.csi_isr) referenced from seekfree_mt9v03x_csi.o(i.mt9v03x_csi_init)
 <LI><a href="#[eb]">csi_mt9v03x_uart_callback</a> from seekfree_mt9v03x_csi.o(i.csi_mt9v03x_uart_callback) referenced from seekfree_mt9v03x_csi.o(i.mt9v03x_csi_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ed]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a1]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1a3]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
</UL>

<P><STRONG><a name="[1a8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a4]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1aa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FLEXSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>ENET2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>ENET2_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>CAN3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>FLEXIO3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1064.o(RESET)
<LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>ENC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>ENC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>ENET2_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>FLEXSPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>GPIO6_7_8_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PXP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>Reserved171_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SJC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SystemInit</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, system_mimxrt1064.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[1a7]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1064.o(i.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ee]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1bf]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1c0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1c2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1c3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1c4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1c5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1a2]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2 (via Veneer)
</UL>

<P><STRONG><a name="[1c6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1c7]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[f0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[f2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; image_binaryzation &rArr; get_threshold &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fe]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1ca]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>

<P><STRONG><a name="[1cb]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>

<P><STRONG><a name="[f9]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[168]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[fd]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1cf]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ff]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1356 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitVideoPll
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[10c]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, board.o(i.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_ConfigMPU &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[110]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, board.o(i.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[113]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CAN1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CAN2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>CAN3_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CAN3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[108]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[109]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[107]"></a>CLOCK_DeinitVideoPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitVideoPll))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[119]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[11b]"></a>CLOCK_GetFreq</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>

<P><STRONG><a name="[11d]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[11e]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = CLOCK_GetPerClkFreq &rArr;  CLOCK_GetFreq (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[111]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 626 bytes, Stack size 48 bytes, fsl_clock.o(i.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[11c]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[121]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[120]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[104]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitArmPll))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[100]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[101]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[102]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SwitchOsc))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12b]"></a>CSI_ClearFifo</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_csi.o(i.CSI_ClearFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSI_ClearFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Reset
</UL>

<P><STRONG><a name="[126]"></a>CSI_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_csi.o(i.CSI_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSI_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>CSI_EnableFifoDmaRequest</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_csi.o(i.CSI_EnableFifoDmaRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSI_EnableFifoDmaRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Stop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Start
</UL>

<P><STRONG><a name="[137]"></a>CSI_EnableInterrupts</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_csi.o(i.CSI_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
</UL>

<P><STRONG><a name="[124]"></a>CSI_GetDefaultConfig</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fsl_csi.o(i.CSI_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CSI_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[3e]"></a>CSI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, isr.o(i.CSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_IRQHandler &rArr; CSI_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>CSI_Init</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, fsl_csi.o(i.CSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = CSI_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetInstance
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Reset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[129]"></a>CSI_ReflashFifoDma</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_csi.o(i.CSI_ReflashFifoDma))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Reset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
</UL>

<P><STRONG><a name="[128]"></a>CSI_Reset</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_csi.o(i.CSI_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CSI_Reset &rArr; CSI_Stop &rArr; CSI_EnableFifoDmaRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Stop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ClearFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
</UL>

<P><STRONG><a name="[135]"></a>CSI_SetRxBufferAddr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_csi.o(i.CSI_SetRxBufferAddr))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
</UL>

<P><STRONG><a name="[12e]"></a>CSI_TransferCreateHandle</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fsl_csi.o(i.CSI_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = CSI_TransferCreateHandle &rArr; CSI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetInstance
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[132]"></a>CSI_TransferGetFullBuffer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fsl_csi.o(i.CSI_TransferGetFullBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSI_TransferGetFullBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferIncreaseQueueIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_get_full_buffer
</UL>

<P><STRONG><a name="[e8]"></a>CSI_TransferHandleIRQ</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fsl_csi.o(i.CSI_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CSI_TransferHandleIRQ &rArr; CSI_TransferLoadBufferToDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferIncreaseQueueIdx
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetEmptyBufferCount
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Stop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Start
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_csi.o(i.CSI_TransferCreateHandle)
</UL>
<P><STRONG><a name="[136]"></a>CSI_TransferStart</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fsl_csi.o(i.CSI_TransferStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CSI_TransferStart &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetEmptyBufferCount
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Start
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_start
</UL>

<P><STRONG><a name="[138]"></a>CSI_TransferSubmitEmptyBuffer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_csi.o(i.CSI_TransferSubmitEmptyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CSI_TransferSubmitEmptyBuffer &rArr; CSI_TransferLoadBufferToDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferIncreaseQueueIdx
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetQueueDelta
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetEmptyBufferCount
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Start
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
</UL>

<P><STRONG><a name="[b4]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA0_DMA16_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA0_DMA16_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA10_DMA26_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA10_DMA26_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA11_DMA27_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA11_DMA27_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA12_DMA28_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA12_DMA28_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA13_DMA29_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA13_DMA29_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA14_DMA30_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA14_DMA30_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA15_DMA31_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA15_DMA31_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA1_DMA17_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA1_DMA17_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA2_DMA18_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA2_DMA18_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA3_DMA19_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA3_DMA19_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA4_DMA20_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA4_DMA20_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA5_DMA21_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA5_DMA21_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA6_DMA22_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA6_DMA22_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA7_DMA23_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA7_DMA23_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA8_DMA24_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA8_DMA24_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA9_DMA25_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA9_DMA25_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>DbgConsole_Init</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[146]"></a>DbgConsole_Printf</STRONG> (Thumb, 60 bytes, Stack size 160 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[145]"></a>DbgConsole_SendData</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_debug_console.o(i.DbgConsole_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = DbgConsole_SendData &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_edma.o(i.EDMA_GetChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = EDMA_GetChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[141]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, fsl_edma.o(i.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>ENET2_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ENET2_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET_1588_Timer_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_1588_Timer_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>ENET_CommonFrame0IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_CommonFrame0IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_DriverIRQHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET2_DriverIRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ENET_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>ENET_GetInstance</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO1_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO2_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>FLEXIO3_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO3_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>FLEXIO_CAMERA_ClearStatusFlags</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsl_flexio_camera.o(i.FLEXIO_CAMERA_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_ClearShifterErrorFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexio_flag_clear
</UL>

<P><STRONG><a name="[14b]"></a>FLEXIO_CommonIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXIO_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO3_DriverIRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO2_DriverIRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO1_DriverIRQHandler
</UL>

<P><STRONG><a name="[65]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, isr.o(i.GPIO2_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO2_Combined_0_15_IRQHandler &rArr; mt9v03x_vsync &rArr; dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(i.GPIO2_Combined_16_31_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[180]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, fsl_gpio.o(i.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_init
</UL>

<P><STRONG><a name="[14f]"></a>GPIO_PinWrite</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_init
</UL>

<P><STRONG><a name="[150]"></a>HAL_UartInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lpuart_adapter.o(i.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[154]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lpuart_adapter.o(i.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>LPUART_Deinit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fsl_lpuart.o(i.LPUART_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LPUART_Deinit &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[15f]"></a>LPUART_DisableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_DisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
</UL>

<P><STRONG><a name="[19b]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
</UL>

<P><STRONG><a name="[151]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[15e]"></a>LPUART_GetEnabledInterrupts</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_GetEnabledInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[159]"></a>LPUART_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
</UL>

<P><STRONG><a name="[15d]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[152]"></a>LPUART_Init</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, fsl_lpuart.o(i.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[15b]"></a>LPUART_TransferCreateHandle</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, fsl_lpuart.o(i.LPUART_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LPUART_TransferCreateHandle &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
</UL>

<P><STRONG><a name="[15c]"></a>LPUART_TransferGetRxRingBufferLength</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_TransferGetRxRingBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
</UL>

<P><STRONG><a name="[ea]"></a>LPUART_TransferHandleIRQ</STRONG> (Thumb, 588 bytes, Stack size 32 bytes, fsl_lpuart.o(i.LPUART_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = LPUART_TransferHandleIRQ &rArr; LPUART_TransferIsRxRingBufferFull &rArr; LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetEnabledInterrupts
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DisableInterrupts
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteNonBlocking
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadNonBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_lpuart.o(i.LPUART_TransferCreateHandle)
</UL>
<P><STRONG><a name="[155]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>PIT_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, isr.o(i.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetStatusFlags
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>RowinformationReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, image_process.o(i.RowinformationReset))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_line_search
</UL>

<P><STRONG><a name="[d7]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, fsl_sai.o(i.SAI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, fsl_sai.o(i.SAI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_sai.o(i.SAI3_RX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SAI3_RX_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_sai.o(i.SAI3_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SAI3_TX_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_spdif.o(i.SPDIF_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPDIF_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>SerialManager_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[144]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[143]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[148]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, serial_manager.o(i.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
</UL>

<P><STRONG><a name="[164]"></a>Serial_UartInit</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, serial_port_uart.o(i.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[166]"></a>Serial_UartWrite</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial_port_uart.o(i.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[147]"></a>StrFormatPrintf</STRONG> (Thumb, 1588 bytes, Stack size 160 bytes, fsl_str.o(i.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_assert.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_DriverIRQHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_DriverIRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DriverIRQHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetInstance
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetDefaultConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferGetRxRingBufferLength
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteNonBlocking
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadNonBlocking
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TX_DriverIRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_RX_DriverIRQHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_displayimage032_zoom1
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
</UL>

<P><STRONG><a name="[13a]"></a>__hardfp_modf</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[13b]"></a>__hardfp_pow</STRONG> (Thumb, 2140 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_threshold
</UL>

<P><STRONG><a name="[170]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16a]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[169]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16e]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16b]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16f]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[173]"></a>board_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = board_init &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>csi_add_empty_buffer</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, zf_csi.o(i.csi_add_empty_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = csi_add_empty_buffer &rArr; CSI_TransferSubmitEmptyBuffer &rArr; CSI_TransferLoadBufferToDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_isr
</UL>

<P><STRONG><a name="[176]"></a>csi_get_full_buffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, zf_csi.o(i.csi_get_full_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = csi_get_full_buffer &rArr; CSI_TransferGetFullBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetFullBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_isr
</UL>

<P><STRONG><a name="[177]"></a>csi_init</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, zf_csi.o(i.csi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = csi_init &rArr; csi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetDefaultConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_iomuxc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[178]"></a>csi_iomuxc</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, zf_csi.o(i.csi_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = csi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[ec]"></a>csi_isr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, seekfree_mt9v03x_csi.o(i.csi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = csi_isr &rArr; csi_add_empty_buffer &rArr; CSI_TransferSubmitEmptyBuffer &rArr; CSI_TransferLoadBufferToDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_get_full_buffer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seekfree_mt9v03x_csi.o(i.mt9v03x_csi_init)
</UL>
<P><STRONG><a name="[eb]"></a>csi_mt9v03x_uart_callback</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, seekfree_mt9v03x_csi.o(i.csi_mt9v03x_uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = csi_mt9v03x_uart_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seekfree_mt9v03x_csi.o(i.mt9v03x_csi_init)
</UL>
<P><STRONG><a name="[17a]"></a>csi_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, zf_csi.o(i.csi_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = csi_start &rArr; CSI_TransferStart &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[17b]"></a>dma_restart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, zf_camera.o(i.dma_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
</UL>

<P><STRONG><a name="[17d]"></a>edge_line_search</STRONG> (Thumb, 602 bytes, Stack size 36 bytes, image_process.o(i.edge_line_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = edge_line_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RowinformationReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17f]"></a>fast_gpio_init</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, zf_gpio.o(i.fast_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = fast_gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[181]"></a>fast_gpio_set</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, zf_gpio.o(i.fast_gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fast_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_reg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[17c]"></a>flexio_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, zf_camera.o(i.flexio_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
</UL>

<P><STRONG><a name="[184]"></a>get_config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, seekfree_mt9v03x.o(i.get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_config &rArr; uart_putbuff &rArr; LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[186]"></a>get_threshold</STRONG> (Thumb, 462 bytes, Stack size 2152 bytes, image_process.o(i.get_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = get_threshold &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_binaryzation
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>image_binaryzation</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, image_process.o(i.image_binaryzation))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384<LI>Call Chain = image_binaryzation &rArr; get_threshold &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>iomuxc_pinconf</STRONG> (Thumb, 23748 bytes, Stack size 24 bytes, zf_iomuxc.o(i.iomuxc_pinconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_iomuxc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
</UL>

<P><STRONG><a name="[18a]"></a>ips200_address_set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, seekfree_ips200_parallel8.o(i.ips200_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_reg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_drawpoint
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_displayimage032_zoom1
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_clear
</UL>

<P><STRONG><a name="[18d]"></a>ips200_clear</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, seekfree_ips200_parallel8.o(i.ips200_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ips200_clear &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[18e]"></a>ips200_displayimage032_zoom1</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, seekfree_ips200_parallel8.o(i.ips200_displayimage032_zoom1))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ips200_displayimage032_zoom1 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>ips200_drawpoint</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, seekfree_ips200_parallel8.o(i.ips200_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ips200_drawpoint &rArr; ips200_address_set &rArr; ips200_wr_reg &rArr; fast_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_display
</UL>

<P><STRONG><a name="[190]"></a>ips200_init</STRONG> (Thumb, 610 bytes, Stack size 8 bytes, seekfree_ips200_parallel8.o(i.ips200_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ips200_init &rArr; fast_gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_reg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>ips200_w_data</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, seekfree_ips200_parallel8.o(i.ips200_w_data))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_reg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data16
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_wr_data
</UL>

<P><STRONG><a name="[192]"></a>ips200_wr_data</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, seekfree_ips200_parallel8.o(i.ips200_wr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ips200_wr_data &rArr; fast_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_w_data
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[18c]"></a>ips200_wr_data16</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, seekfree_ips200_parallel8.o(i.ips200_wr_data16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ips200_wr_data16 &rArr; fast_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_w_data
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_drawpoint
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_displayimage032_zoom1
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_clear
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>

<P><STRONG><a name="[18b]"></a>ips200_wr_reg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, seekfree_ips200_parallel8.o(i.ips200_wr_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ips200_wr_reg &rArr; fast_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_w_data
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_address_set
</UL>

<P><STRONG><a name="[f3]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = main &rArr; image_binaryzation &rArr; get_threshold &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_displayimage032_zoom1
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_display
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_binaryzation
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_threshold
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_line_search
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[194]"></a>mt9v03x_csi_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, seekfree_mt9v03x_csi.o(i.mt9v03x_csi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mt9v03x_csi_init &rArr; uart_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_start
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>mt9v03x_vsync</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, seekfree_mt9v03x.o(i.mt9v03x_vsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mt9v03x_vsync &rArr; dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>pic_display</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, image_process.o(i.pic_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = pic_display &rArr; ips200_displayimage032_zoom1 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_drawpoint
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_displayimage032_zoom1
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>set_config</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, seekfree_mt9v03x.o(i.set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = set_config &rArr; systick_delay_ms &rArr; systick_delay &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[16c]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[199]"></a>systick_delay</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, zf_systick.o(i.systick_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = systick_delay &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>

<P><STRONG><a name="[191]"></a>systick_delay_ms</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, zf_systick.o(i.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = systick_delay_ms &rArr; systick_delay &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
</UL>

<P><STRONG><a name="[174]"></a>uart_init</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, zf_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = uart_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[19a]"></a>uart_iomuxc</STRONG> (Thumb, 674 bytes, Stack size 16 bytes, zf_uart.o(i.uart_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[185]"></a>uart_putbuff</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, zf_uart.o(i.uart_putbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_putbuff &rArr; LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config
</UL>

<P><STRONG><a name="[196]"></a>uart_rx_irq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, zf_uart.o(i.uart_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rx_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[197]"></a>uart_set_handle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, zf_uart.o(i.uart_set_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = uart_set_handle &rArr; LPUART_TransferCreateHandle &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[19c]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[1d4]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[19f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
</UL>

<P><STRONG><a name="[ef]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1d5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1d6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[13c]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[19e]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[19d]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[171]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a0]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[112]"></a>CLOCK_GetDiv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board.o(i.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[10d]"></a>SCB_DisableDCache</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, board.o(i.SCB_DisableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[10e]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, board.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[10f]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, board.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[10b]"></a>CLOCK_DisableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, clock_config.o(i.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = CLOCK_DisableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[10a]"></a>CLOCK_SetDiv</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[103]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[106]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clock_config.o(i.CLOCK_SetPllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetPllBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[165]"></a>SerialManager_StartWriting</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[167]"></a>SerialManager_Write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[153]"></a>HAL_UartGetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpuart_adapter.o(i.HAL_UartGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[1a6]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, system_mimxrt1064.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a5]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, system_mimxrt1064.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11f]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[11a]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[116]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_csi.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
</UL>

<P><STRONG><a name="[125]"></a>CSI_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_csi.o(i.CSI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CSI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
</UL>

<P><STRONG><a name="[12c]"></a>CSI_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_csi.o(i.CSI_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_Start &rArr; CSI_EnableFifoDmaRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_EnableFifoDmaRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[12a]"></a>CSI_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_csi.o(i.CSI_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_Stop &rArr; CSI_EnableFifoDmaRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_EnableFifoDmaRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Reset
</UL>

<P><STRONG><a name="[130]"></a>CSI_TransferGetEmptyBufferCount</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fsl_csi.o(i.CSI_TransferGetEmptyBufferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_TransferGetEmptyBufferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetQueueDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[131]"></a>CSI_TransferGetQueueDelta</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_csi.o(i.CSI_TransferGetQueueDelta))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetEmptyBufferCount
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
</UL>

<P><STRONG><a name="[133]"></a>CSI_TransferIncreaseQueueIdx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_csi.o(i.CSI_TransferIncreaseQueueIdx))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetFullBuffer
</UL>

<P><STRONG><a name="[134]"></a>CSI_TransferLoadBufferToDevice</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_csi.o(i.CSI_TransferLoadBufferToDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_TransferLoadBufferToDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferIncreaseQueueIdx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_SetRxBufferAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[14d]"></a>FLEXIO_ClearShifterErrorFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_flexio_camera.o(i.FLEXIO_ClearShifterErrorFlags))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>

<P><STRONG><a name="[156]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[157]"></a>LPSPI_CommonIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[117]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpuart.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
</UL>

<P><STRONG><a name="[15a]"></a>LPUART_ReadNonBlocking</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, fsl_lpuart.o(i.LPUART_ReadNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = LPUART_ReadNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[160]"></a>LPUART_TransferIsRxRingBufferFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_TransferIsRxRingBufferFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = LPUART_TransferIsRxRingBufferFull &rArr; LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferGetRxRingBufferLength
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[161]"></a>LPUART_WriteNonBlocking</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fsl_lpuart.o(i.LPUART_WriteNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = LPUART_WriteNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[122]"></a>CLOCK_SetDiv</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, zf_csi.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[123]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, zf_csi.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[183]"></a>GPIO_ClearPinsOutput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zf_gpio.o(i.GPIO_ClearPinsOutput))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
</UL>

<P><STRONG><a name="[182]"></a>GPIO_SetPinsOutput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zf_gpio.o(i.GPIO_SetPinsOutput))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_gpio_set
</UL>

<P><STRONG><a name="[118]"></a>CLOCK_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, zf_iomuxc.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[189]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, zf_iomuxc.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[188]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, zf_iomuxc.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[163]"></a>PIT_ClearStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, isr.o(i.PIT_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>PIT_GetStatusFlags</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(i.PIT_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_debug_console.o(i.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendData &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[139]"></a>ConvertFloatRadixNumToString</STRONG> (Thumb, 434 bytes, Stack size 120 bytes, fsl_str.o(i.ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[13e]"></a>ConvertRadixNumToString</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, fsl_str.o(i.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ConvertRadixNumToString &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
